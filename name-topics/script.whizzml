;; topic-name
;;
;; Creates topic name from the first number-of-terms terms of the topic
;;
;; Inputs:
;;   topic: (map) Map with topic attributes
;;   topics: (map) Named topics IDs along their new names
;;   number-of-terms: (number) Number of terms to use in topic name
;;   separator: (string) Separator to join terms to form topic names
;;
;; Outputs: (string) Topic name
;;
(define (topic-name topic topics number-of-terms separator)
  (let (terms (topic "top_terms")
        n (- number-of-terms 1)
	;; List of already named topics to avoid repeating names
        seen (map (lambda (t) (t "name")) (values topics)))
    (loop (ts (map head (tail terms)))
      (if (empty? ts)
        (head (head terms))
        (let (c (join separator (cons (head (head terms)) (take n ts))))
          (if (member? c seen)
	    (recur (tail ts))
	    c))))))

;; rename-topics
;;
;; Retrieves a topic model and renames it using the top terms
;;
;; Inputs:
;;   tm-id: (resource-id) ID of the topic model
;;   number-of-terms: (number) Number of terms to use in topic
;;   separator: (string) Separator to join terms to form topic names
;;
;; Output: (number) Number of topics renamed
;;
(define (rename-topics tm-id number-of-terms separator)
  (let (tm (fetch tm-id)
        topics (reduce (lambda (ns topic)
                         (assoc ns
				(topic "id")
				{"name" (topic-name topic
		 				    ns
						    number-of-terms
						    separator)}))
                       {}
                       (tm ["topic_model" "topics"])))
    (try (update tm-id {"topics" topics})
         (catch e
           (log-error "Error updating topics: " e)
           (raise e)))
    (count topics)))

;; result
;;
;; Updates topics name from a topic model using the top terms of each topic
;; Output: (number) Number of topics renamed
(define result (rename-topics topic-model
			      number-of-terms
			      separator))
