;; Extracts the list of optimls and test dataset from the outputs of
;; a bal-optiml-script execution

;; Obtain output item from an execution by its name
(define (output-from-exec exec output-name)
  (when (= "execution" (resource-type exec))
    (let (outputs (get (get (fetch (wait exec)) "execution" {}) "outputs" [])
          options (when (not (empty? outputs))
                    (filter (lambda (o) (= (head o) output-name)) outputs)))
      (when (not (empty? options))
        ((head options) 1)))))

(define undersampled-optimls (output-from-exec bal-optiml-exec
                                               "undersampled-optimls"))
(define test-dataset (output-from-exec bal-optiml-exec "unbalanced-test-ds"))

(define (get-models optiml-id)
  (let (optiml (fetch (wait optiml-id))
        metric (optiml ["optiml" "metric"])
        class (optiml ["optiml" "metric_class"])
        evaluations (optiml ["optiml" "models"])
        models (for (eval evaluations)
                 (eval "id"))
        class-filter-fn (lambda (ev) (= (ev "class_name") class))
        per-class-stats (for (eval evaluations)
                          ((filter class-filter-fn
                                   (eval ["evaluation"
                                          "info"
                                          "per_class_statistics"])) 0))
        models-info (iterate (acc [] model models stat per-class-stats)
                      (append acc
                              {"id" model
                               "metric" (stat metric)
                               "max_phi" ((stat "max_phi") 0)
                               "probability_threshold" ((stat "max_phi") 1)})))
    (reverse (sort-by-key "metric" models-info))))


(define (get-best-models undersampled-optimls)
  ;; getting best models
  (for (optiml-id undersampled-optimls)
    (head (get-models optiml-id))))

(define undersampled-best-models (get-best-models undersampled-optimls))

(define (best-models-fusion models)
  (let (model-ids (map (lambda (m) (m "id")) models)
        max-phis (map (lambda (m) (m "max_phi")) models)
        fusion-arg (iterate (acc [] m-id model-ids m-p max-phis)
                     (append acc {"id" m-id
                                  "weight" (round (* 100 m-p))})))
    (create-fusion {"models" fusion-arg})))

(define best-models-evals (for (model undersampled-best-models)
                            (create-evaluation {"model" (model "id")
                                                "dataset" test-dataset})))

(define best-fusion (best-models-fusion undersampled-best-models))
(define best-fusion-eval (create-evaluation {"model" best-fusion
                                             "dataset" test-dataset}))
