;; options allowed for evaluation resources
(define EVALUATION_OPTIONS ["sample_rate"
                            "out_of_bag"
                            "range"
                            "replacement"
                            "ordering"
                            "seed"
                            "missing_strategy"
                            "confidence_threshold"
                            "probability_threshold"
                            "fields_map"
                            "negative_class"
                            "positive_class"
                            "threshold"
                            "operating_kind"
                            "operating_point"])

;; list of available classification models
(define SLMS
  ["model" "ensemble" "logisticregression" "deepnet" "linearregression"])

(define (_transpose m)
  (apply map list m))

;; cross-validation-pre
;;
;; retrieves the dataset, model type and arguments to be used in the
;; cross-validation
;; Inputs:
;;   slm-id: (string) Supervised Model ID
;; Output: (list) e.g. ["dataset/1111111" ;; dataset-id
;;                      "logisticregression" ;; model-type
;;                      {"field_balance" true "objective_field" "000004"} ;; model-options
;;                      "000004"] ;; objective-id
;; Raises:
;;  101: The slm-id argument is not a string
;;  102: The slm-id is not a supervised model ID
(define (cross-validation-pre slm-id)
  (check-resource-id slm-id SLMS)
  (let (slm (fetch slm-id)
        model-type (resource-type slm-id)
        [dataset-id model-options] (slm-arguments slm-id)
        objective-id (slm "objective_field"))
    [dataset-id model-type objective-id model-options]))

;; model-cross-validation
;;
;; creates k-fold cross-validation
;; **from an existing model**
;; Inputs:
;;   slm-id: (string) Supervised Model ID
;;   k-folds: (integer) Number of folds
;;   evaluation-options: (map) Options to use in evaluation creation
;;   delete-resources?: (boolean) Whether to delete all intermediate resources
;;
;; Output: (map) Average of evaluations results
;;
;; Raises:
;;  101: The slm-id argument is not a string
;;  102: The slm-id is not a supervised model ID
;;  103: The k-folds argument is not an integer
;;  104: The k-folds argument is not >= 2
;;  106: The model is not a classification model
;;  107: The number of instances in minority class is less than k
;;
(define (model-cross-validation slm-id
                          k-folds
                          evaluation-options
                          delete-resources?
                          . stratified?)
  (let ([dataset-id
         model-type
         objective-id
         model-options] (cross-validation-pre slm-id))
    (ds-cross-validation dataset-id
                         k-folds
                         objective-id
                         model-type
                         model-options
                         evaluation-options
                         delete-resources?
                         stratified?)))

;; General procedure to generate a cross-validation from a dataset
;; Raises:
;;  103: The k-folds argument is not an integer
;;  104: The k-folds argument is not >= 2
;;  107: The number of instances in minority class is less than k

(define (ds-cross-validation dataset-id
                             k-folds
                             objective-id
                             model-type
                             model-options
                             evaluation-options
                             delete-resources?
                             . stratified?)
  (check-integer k-folds 2 false)
  (let (dataset (fetch dataset-id)
        dataset-name (dataset "name" false)
        fields (resource-fields dataset-id)
        regression? (is-regression objective-id fields)
        _ (when (not regression?)
                (check-minority-instances k-folds dataset-id objective-id))
        objective-name (fields [objective-id "name"] false)
        k-fold-datasets (if (or is-regression
                                (empty? stratified?)
                                (not (stratified? 0)))
                              (create-k-folds dataset-id k-folds)
                              (stratified-k-folds dataset
                                                  k-folds
                                                  objective-id))
        evaluations (create-k-evaluations k-fold-datasets
                                          objective-name
                                          dataset-name
                                          model-type
                                          model-options
                                          evaluation-options
                                          delete-resources?)
        evaluations-average (create-and-wait-evaluation {"evaluations"
                                                         evaluations}))
      (when delete-resources?
        (map safe-delete (concat k-fold-datasets evaluations)))
      evaluations-average))


;;----------------------------------------------------------------------------


;; check-resource-id
;;
;; Validates that the argument is a resource ID and its type. Raises an error
;; if otherwise.
;;
;; Inputs:
;;   resource-id: (string) Resource ID
;;   type: (string) Type of resource
;;
;; Output: (string) Checked resource ID
(define (check-resource-id resource-id type)
  (when (not (string? resource-id))
    (raise {"message" (str "Resource ID string expected. Found "
                           resource-id " instead.")
            "code" 101}))
  (when (not (member? (resource-type resource-id) type))
    (raise {"message" (str "Failed to find a correct " type " ID.")
            "code" 102}))
  resource-id)


;; check-integer
;;
;; Validates that the argument is an integer. Raises error if otherwise.
;;
;; Inputs:
;;  value: (number) Integer to be checked
;;  minimum: (number) Minimum value (false if not set)
;;  maximum: (number) Maximum value (false if not set)
;;
;; Output: (number) Checked integer
(define (check-integer value minimum maximum)
  (when (not (integer? value))
    (raise {"message" (str "Integer value expected. Found " value " instead.")
            "code" 103}))
  (when (and minimum (< value minimum))
    (raise {"message" (str "Minimum accepted value is " minimum ". " value
                           " found.")
            "code" 104}))
  (when (and maximum (> value maximum))
    (raise {"message" (str "Maximum accepted value is " maximum ". " value
                           " found.")
            "code" 105}))
  value)

;; check-categorical-objective-id
;;
;; Validates that the argument is a valid categorical objective id in the
;; reference dataset.
;;
;; Inputs:
;;  objective-id: (string) ID of the objective field
;;  fields: (map) Fields informatiion
;;
;; Output: (string) Checked objective field ID
(define (check-categorical-objective-id objective-id fields)
  (when (!= "categorical" (fields [objective-id "optype"] false))
    (raise {"message" (str "Only classification models can be"
                           " cross-validated")
            "code" 106})))

;; is-regression
;;
;; Checks whether the objective field is numeric
;;
;; Inputs:
;;  objective-id: (string) ID of the objective field
;;  fields: (map) Fields informatiion
;;
;; Output: (boolean) True if numeric objective field
(define (is-regression objective-id fields)
  (= "numeric" (fields [objective-id "optype"] false)))


;; check-minority-instances
;;
;; Checks whether the number of instances in the minority class is greater
;; than the number of folds
(define (check-minority-instances k-folds dataset-id objective-id)
  (let (dataset (fetch dataset-id)
        min-cat (last (dataset ["fields" objective-id "summary" "categories"]
                               [[]]))
        min-inst (min-cat 1 0))
    (when (< min-inst k-folds)
      (raise {"message" (str "Failed to create a " k-folds "-folds sample: "
                             "not enough instances in some categories")
              "code" 107}))))

;; --------------------------------------------------------------------------


;; slm-arguments
;;
;; Retrieves the origin dataset and configuration options used in a
;; supervised learning model
;;
;; Inputs:
;;   slm-id: (string) Supervised Model ID
;;
;; Output: (list) [dataset-id model-options]
(define (slm-arguments slm-id)
  (let (last-step-w (resource-workflow slm-id true true)
        step (last-step-w ["steps" 0])
        conf (step "args")
        input (last-step-w ["inputs" 0])
        origin-key ((keys (step "origin")) 0)
        dataset-id (if (= origin-key "dataset")
                       input
                       (create-dataset (assoc {}
                                              (str "origin_" origin-key)
                                              input)))
        conf (dissoc conf ((keys (step "origin")) 0)))
  (log-info "Dataset ID and configuration: " dataset-id conf)
  [dataset-id conf]))

;; Stratified sampling: Keeping proportions in sampling across classes

(define (stratified-k-folds dataset k-folds objective-id)
  (let (summary (dataset ["fields" objective-id "summary" "categories"] [[]])
        cat-names (map head summary)
        cat-ds-ids (for (cat cat-names)
                     (create-k-folds
                       (create-dataset {"origin_dataset" (dataset "resource")
                                        "lisp_filter" (flatline
                                                        "(= "
                                                        "(f {{objective-id}})"
                                                        " {{cat}})")
                                        "name" (str (dataset "name")
                                                    " - "
                                                    cat)})
                       k-folds))

        ds-ids (map (lambda (ids) (create-dataset {"origin_datasets" ids}))
                    (_transpose cat-ds-ids)))
    (wait* ds-ids)
    (map safe-delete cat-ds-ids)
    ds-ids))


;; create-k-folds
;;
;; creating k-fold splits from a dataset
;;
;; Inputs:
;;   dataset-id: (string) Dataset ID
;;   k-folds: (integer) Number of folds
;;
;; Output: (list) List of dataset IDs
;;
(define (create-k-folds dataset-id k-folds)
  (let (k-fold-fn (lambda (x)
                    (create-dataset {"origin_dataset" dataset-id
                                     "row_offset" x
                                     "row_step" k-folds
                                     "new_fields" [{"name" "k_fold"
                                                    "field" (str x)}]}))
        dataset-ids (map k-fold-fn (range 0 k-folds)))
    (wait* dataset-ids)))

;; pair-k-folds
;;
;; Builds a list of pairs of hold-out and complementary datasets for all
;; the k-fold dataset IDs.
;;
;; Inputs:
;;   dataset-ids: (list) List of the k-fold dataset IDs
;;
;; Output: (list) List of pairs [hold-out dataset, multidataset with the rest]
;;
(define (pair-k-folds dataset-ids)
  (map (lambda(x)
         [(nth dataset-ids x)
          (concat (take x dataset-ids)
          (drop (+ x 1) dataset-ids))])
       (range 0 (count dataset-ids))))


;; select-map-keys
;;
;; Filters the keys in a map, keeping only the ones that appear in the list.
;;
;; Inputs:
;;   map: (map) Key, value maps
;;   keys-list: (list) List of keys to be kept in the map
;; Output: (map) filtered map with only the keys in the keys-list
;;
(define (select-map-keys a-map keys-list)
  (reduce (lambda (x y) (let (value (a-map y false))
                          (cond value (assoc x y value) x)))
          {}
          keys-list))

;; create-k-models
;;
;; Creates the models for a set of k-fold datasets
;;
;; Inputs:
;;   type: (string) type of model (model or ensemble)
;;   multidatasets: (list) List of lists of datset IDs once a k-fold is
;;                         excluded
;;   objective-name: (string) name of the objective field
;;   model-options: (map) Options for the model or ensemble
;;
;; Output: (list) model IDs
;;
(define (create-k-models type multidatasets objective-name model-options)
  (let (models (map (lambda (x)
                      (create type
                              (merge {"datasets" x
                                      "objective_field" objective-name}
                                     model-options)))
                     multidatasets))
    (wait* models)))

;; create-k-evaluations
;;
;; Creates the models/ensembles and evaluations for a set of k-fold datasets
;;
;; Inputs:
;;   dataset-ids: (list) List of the k-fold dataset IDs
;;   objective-name: (string) Objective field name
;;   dataset-name: (string) Name of the origin dataset
;;   model-type: (string) Type of supervised learning model
;;   model-options: (map) Options used to build the models/ensembles
;;   evaluation-options: (map) Options used to build evaluations
;;   delete-resources?: (boolean) Whether to delete all intermediate resources
;;
;; Output: (list) List of evaluation IDs
;;
(define (create-k-evaluations dataset-ids
                              objective-name
                              dataset-name
                              model-type
                              model-options
                              evaluation-options
                              delete-resources?)
  (let (number-of-models (model-options "number_of_models" 1)
        k-fold-pairs (pair-k-folds dataset-ids)
        evaluation-options (select-map-keys evaluation-options
                                            EVALUATION_OPTIONS)
        multidatasets (map last k-fold-pairs)
        models  (create-k-models  model-type
                                  multidatasets
                                  objective-name
                                  model-options)
        evaluations (iterate (es []
                              id dataset-ids
                              mid models
                              idx (range 1 (+ 1 (count dataset-ids))))
                      (let (name (str "Evaluation tested with subset "
                                      idx
                                      " of " dataset-name)
                            opts (assoc evaluation-options "name" name))
                       (append es (create-evaluation id mid opts)))))
    (wait* evaluations)
    (when delete-resources?
      (map safe-delete models))
    evaluations))


;; safe-delete
;;
;; deletes resources ignoring errors
;; Inputs:
;;   id: (resource-id) resource to be deleted
;;
;; Output: (boolean) true if successful, false if not
;;
(define (safe-delete id)
  (try (delete id)
       (catch e
         (log-info (str "Error deleting resource " id " ignored"))
         false)))
